package com.evemap;

import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.sql.*;
import java.util.*;
import java.util.List;

import com.evemap.dbinteraction.DBPersister;
import com.evemap.objects.*;

public class InfluenceCalculator implements Runnable{

	private DataManager data;
	private Graphics2D graphicsManager;

//	Information needed to draw the last row
	private Alliance[] prevRow = new Alliance[MapConstants.HORIZONTAL_SIZE];
	private double[] prevInf = new double[MapConstants.HORIZONTAL_SIZE + 1];

//	Vector of jumps
	private Vector<Jump> jumpsV;
//	Hashtable of the solar systems
	private HashMap<Integer, SolarSystem> systems;
	private DBPersister dbPersister;
	//Hashtable of all of the alliances
	private HashMap<Integer, Alliance> alliances;
	//Matrix for text name placement
	private Alliance[][] sovMap = new Alliance[MapConstants.HORIZONTAL_SIZE/MapConstants.SAMPLE_RATE][MapConstants.VERTICAL_SIZE/MapConstants.SAMPLE_RATE];

	private final String soveregntyDate;

	private Integer[][] oldSovs;
	private boolean useOldColors = false;
	private Connection[] db;

	/**
	 *
	 * @param data
	 * @param soveregntyDate
	 * @param dbPersister
	 * @param jumps
	 * @param db
	 */
	public InfluenceCalculator(DataManager data, String soveregntyDate, DBPersister dbPersister, Vector<Jump> jumps, Connection[] db){
		this.soveregntyDate = soveregntyDate;
		this.dbPersister = dbPersister;
		this.data = data;
		this.db = db;
		graphicsManager = data.getGraphicsManager();
		jumpsV = jumps;
		systems = data.getSystems();
		alliances = data.getAlliances();
	}

	public void run() {		
		CalculateRow[] rowWorker = new CalculateRow[MapConstants.THREADPOOL_SIZE];

		for (int i = 0; i < MapConstants.THREADPOOL_SIZE; i++){
			int quanta = MapConstants.HORIZONTAL_SIZE/MapConstants.THREADPOOL_SIZE*(i + 1) - 
			MapConstants.HORIZONTAL_SIZE/MapConstants.THREADPOOL_SIZE*i;
			rowWorker[i] = new CalculateRow(MapConstants.HORIZONTAL_SIZE/MapConstants.THREADPOOL_SIZE*i, 
					MapConstants.HORIZONTAL_SIZE/MapConstants.THREADPOOL_SIZE*(i + 1), this, db[i]);
			rowWorker[i].setupRowData(new double[quanta], new boolean[quanta], new Alliance[quanta], new Alliance[quanta]);
			rowWorker[i].setAlliances(data.getAlliances());
			if(useOldColors)
				rowWorker[i].setOldSovs(oldSovs);
			rowWorker[i].start();
		}

		try {
			for (int i = 0; i < MapConstants.THREADPOOL_SIZE; i += 1){
				rowWorker[i].join();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		repaint();

//		Draw the last row
		for (int x = 0; x < MapConstants.HORIZONTAL_SIZE; x++){
			Alliance prew = prevRow[x];
			if (prew != null){
				int alpha = Math.min(190, (int)(Math.log(Math.log(prevInf[x]+1.0)+1.0)*700));
				graphicsManager.setColor(new Color(prew.getColor().getRed(),prew.getColor().getGreen(),prew.getColor().getBlue(),alpha));
				graphicsManager.fillRect(x, MapConstants.VERTICAL_SIZE - 1, 1, 1);
			}
		}

		drawLegend();

		data.writeToFile(true);
		repaint();
	}

	private void drawLegend(){
		//draw jumps
		for(Jump currentJump : jumpsV)
			currentJump.draw(graphicsManager);

		//draw systems
		for(SolarSystem system : systems.values())
			system.draw(this);

		repaint();
		drawSovChangeCircles();
		generateRegionNames();

		try{
			dbPersister.updateAllianceColors();
			graphicsManager.setColor(Color.DARK_GRAY);
			//Out of respect for the author, we leave Paladin's name on the map
			Font defaultFont = graphicsManager.getFont();
			graphicsManager.setFont(new Font(graphicsManager.getFont().getFontName(),Font.BOLD,graphicsManager.getFont().getSize()));
			graphicsManager.drawString("EVE Null-Sec Player Influence Map", 4, 17);
			graphicsManager.setFont(defaultFont);
			List<String> toDraw = new ArrayList<String>();
			toDraw.add("Generated by Verite Rendition");
			toDraw.add("Powered By DOTLAN EveMaps");
			toDraw.add("Using sovereignty data on " + soveregntyDate);
			int yPosition = 35;
			for(String nextToDraw : toDraw){
				graphicsManager.drawString(nextToDraw, 4, yPosition);
				yPosition += 18;
			}
			yPosition += 18;

			//Draekas Addition***********************************************
			List<TitleVectorItem> titleList = new ArrayList<TitleVectorItem>();
			fillAllianceTitleVector(titleList);
			drawAllianceTitles(titleList);

			Font small = new Font("MS Sans Serif",0,9);
			graphicsManager.setFont(small);
			graphicsManager.setColor(Color.WHITE);
//			int y = 106;
			graphicsManager.drawString("Sov. Lost",35,yPosition);
			graphicsManager.drawString("Sov. Gain",135,yPosition);
			graphicsManager.drawString("System",208,yPosition);
			graphicsManager.drawString("Region",250,yPosition);
			graphicsManager.drawString("Grid Ref",300,yPosition);
			yPosition += 15;
			Shape defClip = graphicsManager.getClip();

			ResultSet rs = dbPersister.getSoverentyChanges();

			Color cStantion = new Color(0, 0, 0x40);
			Color gridRefColor = new Color (0x64, 0xC0,0xC0);
			while(rs.next()){
				//String fromS=rs.getString(1), toS=rs.getString(2);
				String system = rs.getString(3), region = rs.getString(4), gridRef=rs.getString(6);
				if(rs.getInt(5) == 1){
					graphicsManager.setClip(5, yPosition - 50, 298, 100);
					graphicsManager.setColor(cStantion);
					graphicsManager.fillRect(5, yPosition - 10, 290, 13);
				}
				//if(stantion)system="OP:"+system;
				Alliance from = alliances.get(Integer.valueOf(rs.getInt(1)));
				
				if(from!=null){
					graphicsManager.setClip(5, yPosition - 50, 98, 100);
					graphicsManager.setColor(from.getNameColor());
					graphicsManager.drawString(from.getName(), 5, yPosition);
					if(from.getColor() != null)
						graphicsManager.setColor(from.getColor());
					graphicsManager.drawOval(2, yPosition, 2, 2);
				}
				
				Alliance to = alliances.get(Integer.valueOf(rs.getInt(2)));
				
				if(to != null){
					graphicsManager.setClip(105, yPosition - 50, 98, 100);
					graphicsManager.setColor(to.getNameColor());
					graphicsManager.drawString(to.getName(), 105, yPosition);
					if(to.getColor() != null)
						graphicsManager.setColor(to.getColor());
					graphicsManager.drawOval(2, yPosition, 2, 2);
				}
				
				graphicsManager.setColor(MapConstants.STAR_COLOR);
				graphicsManager.setClip(205, yPosition - 50, 40, 100);
				graphicsManager.drawString(system, 205, yPosition);
				graphicsManager.setColor(Color.WHITE);
				graphicsManager.setClip(246, yPosition - 50, 50, 100);
				graphicsManager.drawString(region, 246, yPosition);

				//Draw gridRef
				graphicsManager.setColor(gridRefColor);
				graphicsManager.setClip(300,yPosition-50,55,100);
				graphicsManager.drawString(gridRef, 300, yPosition);
				yPosition += 15;
			}
			graphicsManager.setClip(defClip);
			graphicsManager.setFont(defaultFont);
			graphicsManager.setColor(Color.DARK_GRAY);
			int y2 = 110;
			graphicsManager.drawLine(5 , y2, 340, y2);
			graphicsManager.drawLine(104, y2 - 15, 104, yPosition - 10);
			graphicsManager.drawLine(204, y2 - 15, 204, yPosition - 10);
			graphicsManager.drawLine(245, y2 - 15, 245, yPosition - 10);
			graphicsManager.drawLine(299, y2 - 15, 299, yPosition - 10);
			
			//Let's draw a legend
			graphicsManager.setFont(defaultFont);
			graphicsManager.setColor(Color.WHITE);
			graphicsManager.drawString("LEGEND", 1700, 19);
			graphicsManager.setColor(Color.DARK_GRAY);
			graphicsManager.drawLine(1680,23,1835,23);
			graphicsManager.setColor(Color.WHITE);
            
			graphicsManager.setFont(small);
            
			graphicsManager.drawString("Star System",1700,35);
			graphicsManager.drawString("Claimed Star System",1700,50);
			graphicsManager.drawString("Star System With Station",1700,65);
			//graphicsManager.drawString("Name Pending (sov 5)",1700,80);
			graphicsManager.drawString("Sovereignty Changed Here",1700,80);
            //-4
			graphicsManager.setColor(Color.orange);
			graphicsManager.fillOval(1690, 30, 2, 2);
			graphicsManager.fillOval(1688, 44, 4, 4);
			graphicsManager.drawRect(1686, 57, 8, 8);
           /* int[] xarray2 = {1686,1694,1690};
            int[] yarray2 = {72,72,80};
            graphicsManager.drawPolygon(xarray2,yarray2,3);*/
            graphicsManager.fillOval(1688, 74, 4, 4);
            graphicsManager.drawOval(1685, 71, 10, 10);
			
            rs.close();

		}catch(Exception ex){
			ex.printStackTrace();
		}
	}

	/**
	 *Draekas Addition.
	 *Fills the Alliance title vector needed for drawAllianceTitles.
	 */
	private  void fillAllianceTitleVector(List<TitleVectorItem> titleList){
		TitleVectorItem temp;
		for(int y = 0; y < MapConstants.VERTICAL_SIZE/MapConstants.SAMPLE_RATE; y++){
			for(int x = 0; x < MapConstants.HORIZONTAL_SIZE/MapConstants.SAMPLE_RATE; x++){
				if (sovMap[x][y] != null){
					temp = new TitleVectorItem(sovMap[x][y].getName(), sovMap[x][y].getNameColor());

					//System.out.println(sovMap[x][y].name);
					temp.setPixelCount(eatAlliance(temp, x, y));
					titleList.add(temp);
					//System.out.println("new vector at (" + x + " , " + y + ")" + " and count=" + temp.pixelCount);
				}
			}
		}

	}

	/**
	 *Draekas Addition. 
	 *Draws the Alliance titles on the map
	 */
	private void drawAllianceTitles(List<TitleVectorItem> titleList){
		Font aliFont;
		int ax, ay;
		Rectangle2D r;
		Font defaultFont = graphicsManager.getFont();

		for(TitleVectorItem temp : titleList){
			ax = (temp.x / temp.getPixelCount() + MapConstants.SAMPLE_RATE / 2);
			ay = (temp.y / temp.getPixelCount() + MapConstants.SAMPLE_RATE / 2);

			//This next line controls the alliance name text size, if names are the wrong size, mess with this
			aliFont = new Font("Verdana", Font.BOLD, (int)(Math.sqrt(temp.getPixelCount()) /3)+8);
			//System.out.println("Writing at "+ ax + ":" + ay + "With font size" + aliFont.getSize());
			//Changed stuff
			//System.out.println(temp.getAllianceName() + ": " + temp.getPixelCount() + " - " + aliFont.getSize());
			graphicsManager.setFont(aliFont);
			r = aliFont.getStringBounds(temp.getAllianceName(), graphicsManager.getFontRenderContext());
			if ((ax - (int)r.getWidth() / 2)< 345 && ay < 450) // The Tau Ceti Federation Fix
			{ // If their text blob starts left of 345 (the change list), shift it to 345 so that it's out of the way
				ax = ax + 345 - (ax - (int)r.getWidth() / 2);
			}
			//System.out.println("Writing at "+ (ax - (int)r.getWidth() / 2)  + ":" + ay + "With font size" + aliFont.getSize());
//			Draw the black outline
			graphicsManager.setColor(Color.BLACK);
			graphicsManager.drawString(temp.getAllianceName(), ax - (int)r.getWidth() / 2 - 1, ay + 10);
			graphicsManager.drawString(temp.getAllianceName(), ax - (int)r.getWidth() / 2 + 1, ay + 10);
			graphicsManager.drawString(temp.getAllianceName(), ax - (int)r.getWidth() / 2, ay + 10 - 1);
			graphicsManager.drawString(temp.getAllianceName(), ax - (int)r.getWidth() / 2, ay + 10 + 1);
//			Draw the colored centre
			graphicsManager.setColor(temp.getNameColor());
			graphicsManager.drawString(temp.getAllianceName(), ax - (int)r.getWidth() / 2, ay + 10);
			graphicsManager.setFont(defaultFont);

		}
	}

	/**
	 *Draekas Addition.
	 *This method uses the sovMap 2D array which was filled during Run() with influence information
	 *and builds a vector of alliance names and coordinates. 
	 *It recurses A LOT, will cause a stackoverflow with default VM settings.
	 */
	private int eatAlliance(TitleVectorItem titleItem, int samplexCoordinate, int sampleyCoordinate){

		if(sovMap[samplexCoordinate][sampleyCoordinate] == null 
				|| !sovMap[samplexCoordinate][sampleyCoordinate].getName().equals(titleItem.getAllianceName()))
			return 0;

		int sumX, sumY, counter = 0;

		titleItem.translate(samplexCoordinate * MapConstants.SAMPLE_RATE, sampleyCoordinate * MapConstants.SAMPLE_RATE);
		counter++;
		sovMap[samplexCoordinate][sampleyCoordinate] = null;
		for(int y = -1; y <= 1; y++){
			for(int x = -1; x <= 1; x++){
				sumX = x + samplexCoordinate;
				sumY = y + sampleyCoordinate;

				if((y != 0 || x != 0) && sumX >= 0 && sumX < MapConstants.HORIZONTAL_SIZE / MapConstants.SAMPLE_RATE 
						&& sumY >= 0 && sumY < MapConstants.VERTICAL_SIZE / MapConstants.SAMPLE_RATE){
					counter += eatAlliance(titleItem, sumX, sumY);
				}
			}
		}
//		System.out.println(titleItem.getAllianceName() + " returning " + counter);		
		return counter;
	}

	private void drawSovChangeCircles(){
		Color old = graphicsManager.getColor();
		graphicsManager.setColor(new Color(0xff,0xff,0xff, 0xbf));
		try {
			ResultSet rs = dbPersister.getSolarSystemSovereignty();
			while(rs.next()){
				SolarSystem ss = new SolarSystem();
				ss.setLocation((rs.getDouble(1 )/ MapConstants.SCALE) + MapConstants.HORIZONTAL_SIZE / 2 + 
						MapConstants.HORIZONTAL_OFFSET, (rs.getDouble(2) / MapConstants.SCALE) + 
						MapConstants.VERTICAL_SIZE / 2 + MapConstants.VERTICAL_OFFSET);
				graphicsManager.drawOval(ss.x - 4, ss.y - 4, 8, 8);
			}
			rs.close();
			graphicsManager.setColor(old);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	private void generateRegionNames() {

		ResultSet rs;
		try {
			rs = dbPersister.getTextualInformation();

			Color oldColor = graphicsManager.getColor();
			graphicsManager.setColor(new Color(0xff, 0xff, 0xff, 0xB0));
			while(rs.next()){
				int x = (int)(rs.getDouble(1) / MapConstants.SCALE) + MapConstants.HORIZONTAL_SIZE / 2 + MapConstants.HORIZONTAL_OFFSET;
				int y = (int)(rs.getDouble(2) / MapConstants.SCALE) + MapConstants.VERTICAL_SIZE / 2 + MapConstants.VERTICAL_OFFSET;
				String s = rs.getString(3);
				Rectangle2D r = graphicsManager.getFont().getStringBounds(s, graphicsManager.getFontRenderContext());
				graphicsManager.drawString(s, x - (int)r.getWidth() / 2, y + 10);
			}
			graphicsManager.setColor(oldColor);
			rs.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Color nextColor(){
		return data.nextColor();
	}

	public void saveColor(Alliance al){
		data.saveColor(al);
	}

	public synchronized List<SolarSystem> getSystemsSov() {
		return data.getSystemsSov();
	}

	public Graphics2D getGraphicsManager() {
		return graphicsManager;
	}
	public Vector<Color> getColorTable() {
		return data.getColorTable();
	}
	public Alliance[][] getSovMap() {
		return sovMap;
	}

	public void repaint(){
		data.paint(data.getImagePanel().getGraphics());
	}

	public void setOldSysSovs(Integer[][] oldSovs) {
		useOldColors = true;
		this.oldSovs = oldSovs;
	}

	public Alliance[] getPrevRow() {
		return prevRow;
	}

	public double[] getPrevInf() {
		return prevInf;
	}
}
